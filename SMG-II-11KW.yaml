sensor:

  # Fault code                                                    ULong 100 2 R
  - platform: modbus_controller
    modbus_controller_id: smg0
    name: "${name} fault code"
    address: 100
    register_type: holding
    value_type: U_DWORD
    accuracy_decimals: 0

  # Warning code                                                  ULong 108 2 R
  - platform: modbus_controller
    modbus_controller_id: smg0
    name: "${name} warning code"
    address: 108
    register_type: holding
    value_type: U_DWORD
    accuracy_decimals: 0

  # Operation Mode                                                UInt  201 1 R 0: Power On
  #                                                                             1: Standby
  #                                                                             2: Mains
  #                                                                             3: Off-Grid
  #                                                                             4: Bypass
  #                                                                             5: Charging
  #                                                                             6: Fault
  - platform: modbus_controller
    modbus_controller_id: smg0
    name: "${name} operation mode id"
    address: 201
    register_type: holding
    value_type: U_WORD
    accuracy_decimals: 0

  # Effective mains voltage                              0.1V     Int   338 1 R
  - platform: modbus_controller
    modbus_controller_id: smg0
    name: "${name} ac mains voltage"
    address: 338
    register_type: holding
    value_type: S_WORD
    unit_of_measurement: "V"
    device_class: voltage
    state_class: measurement
    accuracy_decimals: 1
    filters:
      - multiply: 0.1

  # Mains Frequency                                      0.01Hz   Int   203 1 R
  - platform: modbus_controller
    modbus_controller_id: smg0
    name: "${name} ac mains frequency"
    address: 203
    register_type: holding
    value_type: S_WORD
    unit_of_measurement: "Hz"
    device_class: frequency
    state_class: measurement
    accuracy_decimals: 2
    filters:
      - multiply: 0.01

  # Average mains power                                  1W       Int   340 1 R
  - platform: modbus_controller
    modbus_controller_id: smg0
    name: "${name} average mains power"
    address: 340
    register_type: holding
    value_type: S_WORD
    unit_of_measurement: "W"
    device_class: power
    state_class: measurement
    accuracy_decimals: 0

  # Output effective voltage                             0.1V     Int   606 1 R
  - platform: modbus_controller
    modbus_controller_id: smg0
    name: "${name} output effective voltage"
    address: 606
    register_type: holding
    value_type: S_WORD
    unit_of_measurement: "V"
    device_class: voltage
    state_class: measurement
    accuracy_decimals: 1
    filters:
      - multiply: 0.1

  # Output effective Current                             0.1A     Int   605 1 R
  - platform: modbus_controller
    modbus_controller_id: smg0
    name: "${name} output effective Current"
    address: 605
    register_type: holding
    value_type: S_WORD
    unit_of_measurement: "A"
    device_class: current
    state_class: measurement
    accuracy_decimals: 1
    filters:
      - multiply: 0.1

  # Output frequency                                     0.01Hz   Int   607 1 R
  - platform: modbus_controller
    modbus_controller_id: smg0
    name: "${name} output frequency"
    address: 607
    register_type: holding
    value_type: S_WORD
    unit_of_measurement: "Hz"
    device_class: frequency
    state_class: measurement
    accuracy_decimals: 2
    filters:
      - multiply: 0.01

  # Output active power                                  1W       Int   254 1 R
  - platform: modbus_controller
    modbus_controller_id: smg0
    name: "${name} output active power"
    address: 254
    register_type: holding
    value_type: S_WORD
    unit_of_measurement: "W"
    device_class: power
    state_class: measurement
    accuracy_decimals: 0

  # Output apparent power                                1VA      Int   255 1 R
  - platform: modbus_controller
    modbus_controller_id: smg0
    name: "${name} output apparent power"
    address: 255
    register_type: holding
    value_type: S_WORD
    unit_of_measurement: "VA"
    device_class: apparent_power
    state_class: measurement
    accuracy_decimals: 0

  # Battery average voltage                              0.1V     Int   277 1 R
  - platform: modbus_controller
    modbus_controller_id: smg0
    name: "${name} battery average voltage"
    address: 277
    register_type: holding
    value_type: S_WORD
    unit_of_measurement: "V"
    device_class: voltage
    state_class: measurement
    accuracy_decimals: 1
    filters:
      - multiply: 0.1

  # Battery average Current                              0.1A     Int   278 1 R
  - platform: modbus_controller
    modbus_controller_id: smg0
    name: "${name} battery average Current"
    address: 278
    register_type: holding
    value_type: S_WORD
    unit_of_measurement: "A"
    device_class: current
    state_class: measurement
    accuracy_decimals: 1
    filters:
      - multiply: 0.1

  # Battery average power                                1W       Int   279 1 R
  - platform: modbus_controller
    modbus_controller_id: smg0
    name: "${name} battery average power"
    address: 279
    register_type: holding
    value_type: S_WORD
    unit_of_measurement: "W"
    device_class: power
    state_class: measurement
    accuracy_decimals: 0

  # Battery state of charge                              1%       UInt  280 1 R
  - platform: modbus_controller
    modbus_controller_id: smg0
    name: "${name} battery state of charge"
    address: 280
    register_type: holding
    value_type: U_WORD
    unit_of_measurement: "%"
    device_class: battery
    state_class: measurement
    accuracy_decimals: 0

  # PV1 average voltage                                   0.1V     Int   351 1 R
  - platform: modbus_controller
    modbus_controller_id: smg0
    name: "${name} pv1 average voltage"
    address: 351
    register_type: holding
    value_type: S_WORD
    unit_of_measurement: "V"
    device_class: voltage
    state_class: measurement
    accuracy_decimals: 1
    filters:
      - multiply: 0.1

  # PV2 average voltage                                   0.1V     Int   389 1 R
  - platform: modbus_controller
    modbus_controller_id: smg0
    name: "${name} pv2 average voltage"
    address: 389
    register_type: holding
    value_type: S_WORD
    unit_of_measurement: "V"
    device_class: voltage
    state_class: measurement
    accuracy_decimals: 1
    filters:
      - multiply: 0.1

  # PV1 average current                                   0.1A     Int   352 1 R
  - platform: modbus_controller
    modbus_controller_id: smg0
    name: "${name} pv1 average current"
    address: 352
    register_type: holding
    value_type: S_WORD
    unit_of_measurement: "A"
    device_class: current
    state_class: measurement
    accuracy_decimals: 1
    filters:
      - multiply: 0.1

  # PV2 average current                                   0.1A     Int   390 1 R
  - platform: modbus_controller
    modbus_controller_id: smg0
    name: "${name} pv2 average current"
    address: 390
    register_type: holding
    value_type: S_WORD
    unit_of_measurement: "A"
    device_class: current
    state_class: measurement
    accuracy_decimals: 1
    filters:
      - multiply: 0.1

  # PV1 average power                                     1W       Int   223 1 R
  - platform: modbus_controller
    modbus_controller_id: smg0
    id: smg0_pv1_average_power
    name: "${name} pv1 average power"
    address: 353
    register_type: holding
    value_type: S_WORD
    unit_of_measurement: "W"
    device_class: power
    state_class: measurement
    accuracy_decimals: 0

  # PV2 average power                                     1W       Int   223 1 R
  - platform: modbus_controller
    modbus_controller_id: smg0
    id: smg0_pv2_average_power
    name: "${name} pv2 average power"
    address: 391
    register_type: holding
    value_type: S_WORD
    unit_of_measurement: "W"
    device_class: power
    state_class: measurement
    accuracy_decimals: 0


  # PV1-2 average power                                     1W       Int   223 1 R
  - platform: modbus_controller
    modbus_controller_id: smg0
    id: smg0_pv1_2_average_power
    name: "${name} pv1-2 average power"
    address: 302
    register_type: holding
    value_type: S_WORD
    unit_of_measurement: "W"
    device_class: power
    state_class: measurement
    accuracy_decimals: 0

  # PV1-2 charging average power                            1W       Int   303 1 R
  - platform: modbus_controller
    modbus_controller_id: smg0
    name: "${name} pv1-2 charging average power"
    address: 303
    register_type: holding
    value_type: S_WORD
    unit_of_measurement: "W"
    device_class: power
    state_class: measurement
    accuracy_decimals: 0

  # Load percentage                                      1%       Int   225 1 R
  - platform: modbus_controller
    modbus_controller_id: smg0
    name: "${name} load percentage"
    address: 256
    register_type: holding
    value_type: S_WORD
    unit_of_measurement: "%"
    # device_class: battery
    state_class: measurement
    accuracy_decimals: 0

  # DCDC Temperature                                     1°C      Int   281 1 R
  - platform: modbus_controller
    modbus_controller_id: smg0
    name: "${name} dcdc temperature"
    address: 281
    register_type: holding
    value_type: S_WORD
    unit_of_measurement: "°C"
    device_class: temperature
    state_class: measurement
    accuracy_decimals: 0

  # Inverter Temperature                                 1°C      Int   231 1 R
  - platform: modbus_controller
    modbus_controller_id: smg0
    name: "${name} inverter temperature"
    address: 231
    register_type: holding
    value_type: S_WORD
    unit_of_measurement: "°C"
    device_class: temperature
    state_class: measurement
    accuracy_decimals: 0

  # Produzione DAY                                      1W       Int   702 1 R
  - platform: modbus_controller
    modbus_controller_id: smg0
    id: smg0_power_day
    name: "${name} produzione day"
    address: 702
    register_type: holding
    value_type: S_WORD
    unit_of_measurement: "W"
    device_class: power
    state_class: measurement
    accuracy_decimals: 1
    filters:
      - multiply: 10.0



  # # Output voltage                                        0.1V    Uint  320 1 R/W
  # - platform: modbus_controller
  #   modbus_controller_id: smg0
  #   name: "${name} output voltage"
  #   address: 320
  #   register_type: holding
  #   value_type: U_WORD
  #   unit_of_measurement: "V"
  #   device_class: voltage
  #   # state_class: measurement
  #   accuracy_decimals: 1
  #   filters:
  #     - multiply: 0.1

  # # Output frequency setting                              0.01Hz  Uint  321 1 R/W
  # - platform: modbus_controller
  #   modbus_controller_id: smg0
  #   name: "${name} output frequency setting"
  #   address: 321
  #   register_type: holding
  #   value_type: U_WORD
  #   unit_of_measurement: "Hz"
  #   device_class: frequency
  #   # state_class: measurement
  #   accuracy_decimals: 2
  #   filters:
  #     - multiply: 0.01

  # # Eq Charging voltage                                   0.1V    Uint  334 1 R/W
  # - platform: modbus_controller
  #   modbus_controller_id: smg0
  #   name: "${name} Eq Charging voltage"
  #   address: 334
  #   register_type: holding
  #   value_type: U_WORD
  #   unit_of_measurement: "V"
  #   device_class: voltage
  #   # state_class: measurement
  #   accuracy_decimals: 1
  #   filters:
  #     - multiply: 0.1

  # Rated power                                           W       Uint  691 1 R
  - platform: modbus_controller
    modbus_controller_id: smg0
    name: "${name} rated power"
    address: 691
    register_type: holding
    value_type: U_WORD
    unit_of_measurement: "W"
    device_class: power
    # state_class: measurement
    accuracy_decimals: 0

select:

  # Output priority                                               Uint  601 1 R/W 0: Utility-PV-Battery, 1: PV-Utility-Battery, 2: PV-Battery-Utility
  - platform: modbus_controller
    modbus_controller_id: smg0
    name: "${name} output priority"
    use_write_multiple: true
    address: 601
    value_type: U_WORD
    optionsmap:
      "PV-Utility-Battery (SUB)": 1
      "PV-Battery-Utility (SBU)": 2
      "PV-Utility-Battery (SUF)": 3

  # Input voltage range                                           Uint  302 1 R/W 0: Wide range, 1: Narrow range
 # - platform: modbus_controller
 #   modbus_controller_id: smg0
 #   name: "${name} input voltage range"
 #   use_write_multiple: true
 #   address: 302
 #   value_type: U_WORD
 #   optionsmap:
 #     "Wide range": 0
 #    "Narrow range": 1

  # Buzzer mode                                                   Uint  303 1 R/W 0: Mute in all situations, 1: Sound when the input source is changed or there is a specific warning or fault, 2: Sound when there is aspecific warning or fault, 3: Sound when fault occurs
 # - platform: modbus_controller
 #   modbus_controller_id: smg0
 #   name: "${name} buzzer mode"
 #   use_write_multiple: true
 #   address: 303
 #   value_type: U_WORD
 #   optionsmap:
 #     "Silent": 0
 #     "Beep on input source changes, warnings and faults": 1
 #     "Beep on warnings and faults": 2
 #     "Beep on faults": 3

  # LCD backlight                                                 Uint  305 1 R/W 0: Timed off, 1: Always on
 # - platform: modbus_controller
 #   modbus_controller_id: smg0
 #   name: "${name} lcd backlight"
 #   use_write_multiple: true
 #   address: 305
 #   value_type: U_WORD
 #   optionsmap:
 #     "Timed off": 0
 #     "Always on": 1

  # Battery charging priority                                     Uint  331 1 R/W 0: Utility priority, 1: PV priority, 2: PV is at the same level as the Utility, 3: Only PV charging is allowed
  - platform: modbus_controller
    modbus_controller_id: smg0
    name: "${name} battery charging priority"
    use_write_multiple: true
    address: 632
    value_type: U_WORD
    optionsmap:
      "SOF": 1
      "SNU": 2
      "OSO": 3
      "SOT": 4

  # Turn on mode                                                  Uint  693 1 R/W 0: Can be turn-on locally or remotely, 1: Only local turn-on, 2: Only remote turn-on
  - platform: modbus_controller
    modbus_controller_id: smg0
    name: "${name} turn on mode"
    use_write_multiple: true
    address: 693
    value_type: U_WORD
    optionsmap:
      "Local and remotely turn-on allowed": 0
      "Local turn-on only": 1
      "Remote turn-on only": 2

switch:

   # Neutral to ground                                            Uint  707 1 R/W 0: neutral to ground is off, 1: neutral to ground is on
  - platform: modbus_controller
    modbus_controller_id: smg0
    name: "${name} neutral to ground"
    use_write_multiple: true
    address: 707
    register_type: holding
    bitmask: 1

  # LCD automatically returns to the homepage                     Uint  306 1 R/W 0: Do not return automatically, 1: Automatically return after 1 minute
 #- platform: modbus_controller
 #  modbus_controller_id: smg0
 #  name: "${name} lcd automatically returns to the homepage"
 #  use_write_multiple: true
 #  address: 306
 #  register_type: holding
 #  bitmask: 1

  # Energy-saving mode                                            Uint  307 1 R/W 0: Energy-saving mode is off, 1: Energy-saving mode is on
 #- platform: modbus_controller
 #  modbus_controller_id: smg0
 #  name: "${name} energy-saving mode"
 #  use_write_multiple: true
 #  address: 307
 #  register_type: holding
 #  bitmask: 1

  # Overload automatic restart                                    Uint  308 1 R/W 0: Overload failure will not restart, 1: Automatic restart after overload failure
 #- platform: modbus_controller
 #  modbus_controller_id: smg0
 #  name: "${name} overload automatic restart"
 #  use_write_multiple: true
 #  address: 308
 #  register_type: holding
 #  bitmask: 1

  # Over temperature automatic restart                            Uint  309 1 R/W 0: Over temperature failure will not restart, 1: Automatic restart after over-temperature fault
#  - platform: modbus_controller
#    modbus_controller_id: smg0
#    name: "${name} over temperature automatic restart"
#    use_write_multiple: true
#    address: 309
#    register_type: holding
#    bitmask: 1

  # Overload transfer to bypass enabled                           Uint  310 1 R/W 0: Disable, 1: Enable
#  - platform: modbus_controller
#    modbus_controller_id: smg0
#    name: "${name} overload transfer to bypass enabled"
#    use_write_multiple: true
#    address: 310
#    register_type: holding
#    bitmask: 1

  # Battery Eq mode is enabled                                    Uint  313 1 R/W 0: Disable, 1: Enable
 # - platform: modbus_controller
 #   modbus_controller_id: smg0
 #   name: "${name} battery Eq mode is enabled"
 #   use_write_multiple: true
 #   address: 313
 #   register_type: holding
 #   bitmask: 1

  # Remote switch                                                 Uint  694 1 R/W 0: Remote shutdown, 1: Remote turn-on
  - platform: modbus_controller
    modbus_controller_id: smg0
    name: "${name} remote switch"
    use_write_multiple: true
    address: 694
    register_type: holding
    bitmask: 1

text_sensor:
  # Fault code                                                    ULong 100 2 R
  - platform: modbus_controller
    modbus_controller_id: smg0
    name: "${name} fault"
    address: 100
    register_type: holding
    register_count: 2
    response_size: 4
    raw_encode: HEXBYTES
    lambda: |-
      static const uint8_t FAULTS_SIZE = 27;
      static const char *const FAULTS[FAULTS_SIZE] = {
          "Over temperature of inverter module",                     // 0000 0000 0000 0000 0000 0000 0000 0001 (1)
          "Over temperature of DCDC module",                         // 0000 0000 0000 0000 0000 0000 0000 0010 (2)
          "Battery over voltage",                                    // 0000 0000 0000 0000 0000 0000 0000 0100 (3)
          "PV module over temperature",                              // 0000 0000 0000 0000 0000 0000 0000 1000 (4)
          "Output short circuit",                                    // 0000 0000 0000 0000 0000 0000 0001 0000 (5)
          "Inverter over voltage",                                   // 0000 0000 0000 0000 0000 0000 0010 0000 (6)
          "Output over load",                                        // 0000 0000 0000 0000 0000 0000 0100 0000 (7)
          "Bus over voltage",                                        // 0000 0000 0000 0000 0000 0000 1000 0000 (8)
          "Bus soft start timed out",                                // 0000 0000 0000 0000 0000 0001 0000 0000 (9)
          "PV over current",                                         // 0000 0000 0000 0000 0000 0010 0000 0000 (10)
          "PV over voltage",                                         // 0000 0000 0000 0000 0000 0100 0000 0000 (11)
          "Battery over current",                                    // 0000 0000 0000 0000 0000 1000 0000 0000 (12)
          "Inverter over current",                                   // 0000 0000 0000 0000 0001 0000 0000 0000 (13)
          "Bus low voltage",                                         // 0000 0000 0000 0000 0010 0000 0000 0000 (14)
          "Reserve (Bit 15)",                                        // 0000 0000 0000 0000 0100 0000 0000 0000 (15)
          "Inverter DC component is too high",                       // 0000 0000 0000 0000 1000 0000 0000 0000 (16)
          "Reserve (Bit 17)",                                        // 0000 0000 0000 0001 0000 0000 0000 0000 (17)
          "The zero bias of output current is too large",            // 0000 0000 0000 0010 0000 0000 0000 0000 (18)
          "The zero bias of inverter current is too large",          // 0000 0000 0000 0100 0000 0000 0000 0000 (19)
          "The zero bias of battery current is too large",           // 0000 0000 0000 1000 0000 0000 0000 0000 (20)
          "The zero bias of PV current is too large",                // 0000 0000 0001 0000 0000 0000 0000 0000 (21)
          "Inverter low voltage",                                    // 0000 0000 0010 0000 0000 0000 0000 0000 (22)
          "Inverter negative power protection",                      // 0000 0000 0100 0000 0000 0000 0000 0000 (23)
          "The host in the parallel system is lost",                 // 0000 0000 1000 0000 0000 0000 0000 0000 (24)
          "Synchronization signal abnormal in the parallel system",  // 0000 0001 0000 0000 0000 0000 0000 0000 (25)
          "The battery type is incompatible",                        // 0000 0010 0000 0000 0000 0000 0000 0000 (26)
          "Parallel versions are incompatible",                      // 0000 0100 0000 0000 0000 0000 0000 0000 (27)
      };
      std::string values = "";

      uint32_t mask = modbus_controller::dword_from_hex_str(x, 0);
      if (mask) {
        for (int i = 0; i < FAULTS_SIZE; i++) {
          if (mask & (1 << i)) {
            values.append(FAULTS[i]);
            values.append(";");
          }
        }
        if (!values.empty()) {
          values.pop_back();
        }
      }
      return values;

  # Warning code                                                  ULong 108 2 R
  - platform: modbus_controller
    modbus_controller_id: smg0
    name: "${name} warning"
    address: 108
    register_type: holding
    register_count: 2
    response_size: 4
    raw_encode: HEXBYTES
    lambda: |-
      static const uint8_t WARNINGS_SIZE = 19;
      static const char *const WARNINGS[WARNINGS_SIZE] = {
          "Reserve (Bit 0)",                                             // 0000 0000 0000 0000 0000 0000 0000 0001 (1)
          "Mains waveform abnormal",                                     // 0000 0000 0000 0000 0000 0000 0000 0010 (2)
          "Reserve (Bit 2)",                                             // 0000 0000 0000 0000 0000 0000 0000 0100 (3)
          "Mains low voltage",                                           // 0000 0000 0000 0000 0000 0000 0000 1000 (4)
          "Mains over frequency",                                        // 0000 0000 0000 0000 0000 0000 0001 0000 (5)
          "Mains low frequency",                                         // 0000 0000 0000 0000 0000 0000 0010 0000 (6)
          "PV low voltage",                                              // 0000 0000 0000 0000 0000 0000 0100 0000 (7)
          "Over temperature",                                            // 0000 0000 0000 0000 0000 0000 1000 0000 (8)
          "Battery low voltage",                                         // 0000 0000 0000 0000 0000 0001 0000 0000 (9)
          "Battery is not connected",                                    // 0000 0000 0000 0000 0000 0010 0000 0000 (10)
          "Overload",                                                    // 0000 0000 0000 0000 0000 0100 0000 0000 (11)
          "Battery Eq charging",                                         // 0000 0000 0000 0000 0000 1000 0000 0000 (12)
          "Battery undervoltage",                                        // 0000 0000 0000 0000 0001 0000 0000 0000 (13)
          "Output power derating",                                       // 0000 0000 0000 0000 0010 0000 0000 0000 (14)
          "Fan blocked",                                                 // 0000 0000 0000 0000 0100 0000 0000 0000 (15)
          "PV energy is too low to be use",                              // 0000 0000 0000 0000 1000 0000 0000 0000 (16)
          "Parallel communication interrupted",                          // 0000 0000 0000 0001 0000 0000 0000 0000 (17)
          "Output mode of Single and Parallel systems inconsistent",     // 0000 0000 0000 0010 0000 0000 0000 0000 (18)
          "Battery voltage difference of parallel system is too large",  // 0000 0000 0000 0100 0000 0000 0000 0000 (19)
      };
      std::string values = "";

      uint32_t mask = modbus_controller::dword_from_hex_str(x, 0);
      if (mask) {
        for (int i = 0; i < WARNINGS_SIZE; i++) {
          if (mask & (1 << i)) {
            values.append(WARNINGS[i]);
            values.append(";");
          }
        }
        if (!values.empty()) {
          values.pop_back();
        }
      }
      return values;

  # Operation Mode                                                UInt  201 1 R 0: Power On, 1: Standby, 2: Mains, 3: Off-Grid, 4: Bypass, 5: Charging, 6: Fault
  - platform: modbus_controller
    modbus_controller_id: smg0
    name: "${name} operation mode"
    address: 201
    register_type: holding
    raw_encode: HEXBYTES
    lambda: |-
      uint16_t value = modbus_controller::word_from_hex_str(x, 0);
      switch (value) {
        case 0: return std::string("Power On");
        case 1: return std::string("Standby");
        case 2: return std::string("Mains");
        case 3: return std::string("Off-Grid");
        case 4: return std::string("Bypass");
        case 5: return std::string("Charging");
        case 6: return std::string("Fault");
      }
      return std::string("Unknown");

number:
  # Output voltage                                                0.1V    Uint  320 1 R/W
 # - platform: modbus_controller
 #   modbus_controller_id: smg0
 #   name: "${name} output voltage"
 #   use_write_multiple: true
 #   address: 320
 #   register_type: holding
 #   value_type: U_WORD
 #   min_value: 0.0
    # max_value: 100.0
 #   step: 0.1
 #   unit_of_measurement: "V"
 #   lambda: "return x * 0.1f;"
 #   write_lambda: |-
 #     return x * 10.0f;

  # Output frequency setting                                      0.01Hz  Uint  321 1 R/W
  #- platform: modbus_controller
  #  modbus_controller_id: smg0
  #  name: "${name} output frequency setting"
  #  use_write_multiple: true
  #  address: 321
  #  register_type: holding
  #  value_type: U_WORD
  #  min_value: 0.0
    # max_value: 100.0
  #  step: 0.01
  #  unit_of_measurement: "Hz"
  #  lambda: "return x * 0.01f;"
  #  write_lambda: |-
   #   return x * 100.0f;

  # Battery overvoltage protection point                          0.1V    Uint  631 1 R/W
  - platform: modbus_controller
    modbus_controller_id: smg0
    name: "${name} battery overvoltage protection point"
    use_write_multiple: true
    address: 631
    register_type: holding
    value_type: U_WORD
    min_value: 0.0
    # max_value: 100.0
    step: 0.1
    unit_of_measurement: "V"
    lambda: "return x * 0.1f;"
    write_lambda: |-
      return x * 10.0f;

  # Max charging voltage                                          0.1V    Uint  637 1 R/W
  - platform: modbus_controller
    modbus_controller_id: smg0
    name: "${name} max charging voltage"
    use_write_multiple: true
    address: 637
    register_type: holding
    value_type: U_WORD
    min_value: 0.0
    max_value: 100.0
    step: 0.1
    unit_of_measurement: "V"
    lambda: "return x * 0.1f;"
    write_lambda: |-
      return x * 10.0f;

  # Floating charging voltage                                     0.1V    Uint  638 1 R/W
  - platform: modbus_controller
    modbus_controller_id: smg0
    name: "${name} floating charging voltage"
    use_write_multiple: true
    address: 638
    register_type: holding
    value_type: U_WORD
    min_value: 0.0
    # max_value: 100.0
    step: 0.1
    unit_of_measurement: "V"
    lambda: "return x * 0.1f;"
    write_lambda: |-
      return x * 10.0f;

  # Battery discharge recovery point in mains mode                0.1V    Uint  646 1 R/W
  - platform: modbus_controller
    modbus_controller_id: smg0
    name: "${name} battery discharge recovery point in mains mode"
    use_write_multiple: true
    address: 646
    register_type: holding
    value_type: U_WORD
    min_value: 0.0
    # max_value: 100.0
    step: 0.1
    unit_of_measurement: "V"
    lambda: "return x * 0.1f;"
    write_lambda: |-
      return x * 10.0f;

  # Battery low voltage protection point in mains mode            0.1V    Uint  644 1 R/W
  - platform: modbus_controller
    modbus_controller_id: smg0
    name: "${name} battery low voltage protection point in mains mode"
    use_write_multiple: true
    address: 644
    register_type: holding
    value_type: U_WORD
    min_value: 0.0
    # max_value: 100.0
    step: 0.1
    unit_of_measurement: "V"
    lambda: "return x * 0.1f;"
    write_lambda: |-
      return x * 10.0f;

  # Battery low voltage protection point in off-grid mode          0.1V           Uint  643 1 R/W
  - platform: modbus_controller
    modbus_controller_id: smg0
    name: "${name} battery low voltage protection point in off-grid mode"
    use_write_multiple: true
    address: 643
    register_type: holding
    value_type: U_WORD
    min_value: 0.0
    # max_value: 100.0
    step: 0.1
    unit_of_measurement: "V"
    lambda: "return x * 0.1f;"
    write_lambda: |-
      return x * 10.0f;

  # Maximum charging current                                      0.1A    Uint  640 1 R/W
  - platform: modbus_controller
    modbus_controller_id: smg0
    name: "${name} maximum charging current"
    use_write_multiple: true
    address: 640
    register_type: holding
    value_type: U_WORD
    min_value: 0.0
    max_value: 100.0
    step: 0.1
    unit_of_measurement: "A"
    lambda: "return x * 0.1f;"
    write_lambda: |-
      return x * 10.0f;

  # Maximum mains charging current                                0.1A    Uint  641 1 R/W
  - platform: modbus_controller
    modbus_controller_id: smg0
    name: "${name} maximum mains charging current"
    use_write_multiple: true
    address: 641
    register_type: holding
    value_type: U_WORD
    min_value: 0.0
    max_value: 100.0
    step: 0.1
    unit_of_measurement: "A"
    lambda: "return x * 0.1f;"
    write_lambda: |-
      return x * 10.0f;

  # Eq Charging voltage                                           0.1V    Uint  334 1 R/W
#  - platform: modbus_controller
#    modbus_controller_id: smg0
#    name: "${name} Eq Charging voltage"
#    use_write_multiple: true
#    address: 334
#    register_type: holding
#    value_type: U_WORD
#    min_value: 0.0
#    max_value: 100.0
#    step: 0.1
#    unit_of_measurement: "V"
#    lambda: "return x * 0.1f;"
#    write_lambda: |-
#      return x * 10.0f;

  # Battery equalization time                                     min     Uint  335 1 R/W Range: 0~900
 # - platform: modbus_controller
 #   modbus_controller_id: smg0
 #   name: "${name} battery equalization time"
 #   use_write_multiple: true
 #   address: 335
 #   register_type: holding
 #   value_type: U_WORD
 #   min_value: 0.0
 #   max_value: 900.0
 #   step: 1
#    unit_of_measurement: "min"

  # Equalization Timeout exit                                     min     Uint  336 1 R/W Range: 0~900
 # - platform: modbus_controller
 #   modbus_controller_id: smg0
 #   name: "${name} equalization Timeout exit"
 #   use_write_multiple: true
 #   address: 336
 #   register_type: holding
  #  value_type: U_WORD
 #   min_value: 0.0
 #   max_value: 900.0
 #   step: 1
 #   unit_of_measurement: "min"

  # Two equalization charging intervals                           day     Uint  337 1 R/W Range: 1~90
 # - platform: modbus_controller
 #   modbus_controller_id: smg0
 #   name: "${name} two equalization charging intervals"
 #   use_write_multiple: true
  #  address: 337
  #  register_type: holding
  #  value_type: U_WORD
  #  min_value: 0.0
  #  max_value: 90.0
  #  step: 1
  #  unit_of_measurement: "day"

# Button entities

  # Exit the fault mode                                           Uint  426   W   1: Exit the fault state(only when the inverter enters the fault mode , it could be available)

    